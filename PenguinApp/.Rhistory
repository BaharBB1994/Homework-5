data("whately_2015")
data("orchard_2015")
# Combine the datasets and add a 'station' column
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
# UI
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
# Server
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
# Run the application
shinyApp(ui = ui, server = server)
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
#install.packages("macleish")
# install.packages("dplyr")
# install.packages("lubridate")
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
# Load the datasets
data("whately_2015")
data("orchard_2015")
# Combine the datasets and add a 'station' column
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
# UI
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
# Server
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
data("whately_2015")
data("orchard_2015")
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
data("whately_2015")
data("orchard_2015")
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotlyOutput("timeSeriesPlot")  # <-- changed from plotOutput
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
data("whately_2015")
data("orchard_2015")
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotlyOutput("timeSeriesPlot")  # <-- changed from plotOutput
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
data("whately_2015")
data("orchard_2015")
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
shinyApp(ui = ui, server = server)
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
#install.packages("macleish")
# install.packages("dplyr")
# install.packages("lubridate")
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
# Load the datasets
data("whately_2015")
data("orchard_2015")
# Combine the datasets and add a 'station' column
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
# UI
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
# Server
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
#install.packages("macleish")
# install.packages("dplyr")
# install.packages("lubridate")
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
# Load the datasets
data("whately_2015")
data("orchard_2015")
# Combine the datasets and add a 'station' column
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
# UI
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotOutput("timeSeriesPlot")
)
)
)
# Server
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(macleish)
library(plotly)
data("whately_2015")
data("orchard_2015")
whately_2015$station <- "Whately"
orchard_2015$station <- "Orchard"
weather_data <- bind_rows(whately_2015, orchard_2015)
ui <- fluidPage(
titlePanel("MacLeish Weather Data Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("station", "Select Station:",
choices = c("Whately", "Orchard")),
dateRangeInput("dates", "Select Date Range:",
start = min(weather_data$when),
end = max(weather_data$when),
min = min(weather_data$when),
max = max(weather_data$when)),
selectInput("variable", "Select Variable:",
choices = c("Temperature" = "temperature",
"Wind Speed" = "wind_speed",
"Relative Humidity" = "rel_humidity",
"Pressure" = "pressure",
"Rainfall" = "rainfall",
"Solar Radiation" = "solar_radiation"))
),
mainPanel(
plotlyOutput("timeSeriesPlot")  # <-- changed from plotOutput
)
)
)
server <- function(input, output) {
filtered_data <- reactive({
weather_data %>%
filter(station == input$station,
when >= input$dates[1],
when <= input$dates[2]) %>%
select(when, value = all_of(input$variable))
})
output$timeSeriesPlot <- renderPlotly({
data <- filtered_data()
p <- ggplot(data, aes(x = when, y = value)) +
geom_line() +
labs(title = paste(input$variable, "at", input$station, "Station"),
x = "Date", y = input$variable) +
theme_minimal()
ggplotly(p)
})
}
# Run the app
shinyApp(ui = ui, server = server)
